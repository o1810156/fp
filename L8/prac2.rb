# フィボナッチ数列に関して以下のようになるように実装する

def assert(flag)
    if !(flag) then raise "実装がおかしい！" end
end

def fib_checker
     assert yield(0)==0   
     assert yield(1)==1   
     assert yield(2)==1   
     assert yield(3)==2
     assert yield(4)==3
     assert yield(25)==75025
    #  assert yield(50)==12586269025
end

# 再帰定義のフィボナッチ

def fib_rec(n)
    if n <= 0
        return 0
    elsif n == 1
        return 1
    else
        return fib_rec(n-2) + fib_rec(n-1)
    end
end

p fib_rec(25) # => 75025
fib_checker do |n| fib_rec(n) end

# 繰り返しを使用するフィボナッチ

def fib_for(n)
    x0, x1 = 0, 1
    n.times do
        x0, x1 = x1, x0 + x1
    end
    return x0
end

p fib_for(50) # => 12586269025
fib_checker do |n| fib_for(n) end

# 行列を使用するフィボナッチ(1)

=begin

```math
x[i+1] = x[i-1] + x[i]
x[i] = x[i]
```

より、行列

```math
q = [[1, 1],
     [1, 0]]
```

を`[[x[i]], [x[i-1]]]`に掛けると、次の項を求めることができる。

`v = [[1], [1]]`とすると、行列の性質より、

```
fib_mat(n) = (q^n * v)[0][0]
```

であり、さらに

```疑似コード
if n == 0 then
    q^n == E
elsif n % 2 == 1 then
    q^n == q * q^(n-1)
elsif n % 2 == 0 then
    q^n == (q ^ (n/2)) ^ 2
end
```

より、処理回数を大幅に減らすことが可能である。

このことをもとにコードを実装した。

=end

def dot(p, q)
    res = [[0, 0], [0, 0]]
    for i in 0..1
        for j in 0..1
            for k in 0..1
                res[i][j] = p[i][0] * q[0][j] + p[i][1] * q[1][j]
            end
        end
    end
    return res
end

def dot_exp(q, n)
    if n == 0
        return [[1, 0], [0, 1]]
    elsif n % 2 == 1
        return dot(q, dot_exp(q, n-1))
    elsif n % 2 == 0
        tmp = dot_exp(q, n/2)
        return dot(tmp, tmp)
    end
end

def fib_mat(n)
    q = [[1, 1], [1, 0]]
    if n == 0
        return 0
    else
        q_n = dot_exp(q, n)
        return q_n[1][0]
    end
end

p fib_mat(50) # => 12586269025
fib_checker do |n| fib_mat(n) end

# 行列を使用するフィボナッチ(2)) => 一般項の使用

# 行列の性質を利用して計算を多少楽にさせてみたいと考えた
# |
# V
# 一般項が出てきた

=begin

行列は対角化ができることを利用し、処理を少なくすることを試みる。

`q = [[1, 1], [1, 0]]`

の固有値は

```
t = (1 + sqrt(5)) / 2
u = (1 - sqrt(5)) / 2
```

であるから、
`D = P^(-1) * q * P`
を満たす対角化行列D、正則行列Pとその逆行列P^(-1)はそれぞれ

D = [[t, 0], [0, u]]
P = [[1, 1], [-u, -t]]
P^(-1) = (1/sqrt(5)) * [[t, 1], [-u, -1]]

ここで行列の性質より、

```
q^n = P * D^n * P^(-1)
D = [[t, 0], [0, u]]
-> D^n = [[t^n, 0], [0, u^n]]
```

この式を利用するとさらに処理が少なくなると考えられる。

=end

def fib_mat2(n)
    q = [[1, 1], [1, 0]]
    if n == 0
        return 0
    else
        t = (1 + Math::sqrt(5)) / 2
        u = (1 - Math::sqrt(5)) / 2
        q_n = dot(dot([[1, 1], [-u, -t]], [[t**n, 0], [0, u**n]]), [[t, 1], [-u, -1]])
        # return (q_n[1][0] / Math::sqrt(5)).to_i
        return q_n[1][0] / Math::sqrt(5)
    end
end

p fib_mat2(50) # => 12586269025
fib_checker do |n| fib_mat2(n).to_i end

# 言語の機能: ジェネレータを使用する方法

def fib_byGen(n)
    fib_gen = Enumerator.new do |y|
        x0, x1 = 0, 1
        loop do
            x0, x1 = x1, x0 + x1
            y << x0
        end
    end

    res = 0
    n.times do
        res = fib_gen.next
    end
    return res
end

p fib_byGen(50) # => 12586269025
fib_checker do |n| fib_byGen(n) end

# 制限時間内にいくつまで処理できるかを比較する。

def fib_tester(func_name)
    start, lap = Process.times.utime, 0
    count, res = 0, 0
    func = method(func_name)
    while lap < 10 # 10秒以内にいくつまでたどり着けるかで競う
        res = func.call(count)
        count += 1
        lap = Process.times.utime - start
    end
    # puts "#{func_name}: #{count} = #{res}"
    puts "#{func_name}: #{count}"
end

# fib_tester(:fib_rec)
# fib_tester(:fib_for)
# fib_tester(:fib_mat)
# fib_tester(:fib_mat2)

$_fib_gen = Enumerator.new do |y|
    x0, x1 = 0, 1
    loop do
        x0, x1 = x1, x0 + x1
        y << x0
    end
end
def fib_gen(n)
    return $_fib_gen.next
end

# fib_tester(:fib_gen)

# =>
# fib_rec: 38 = 24157817
# fib_for: 5540 = 171022929952713512861047910704961770142301072163063795473603058357092153633819557749198424183840748197893987621316188671238845621586779293870684275177544690342793067993681240942517003985957142645710626254289033390805361282548568877943032077498489884093084086686279195313288828446143399975310482973831849961878651289301534828017567240425402677816168159008940954461543531461283589162691447597200449622670816797330902295443016890741363372635983395876121061301298656697032427376539079075126391391036241560073902099655394623899597297688945812052009017113029258849625454094630610369488453081737279964706954974180042156637933191630992824581552094163429569288781981855182893798430119133370075142992909335027422142974373497074783019493501406927099902631075537932415573886501267919302487779730103569530562347541160451470099987197143617364370577857608350097033810241000059261855937346562292083051123994945273512085599539909236558040999622350824681315753126936330942624600597751933913678756059974013826755523702764761775611669500890214333822329425908316815558765921629958462619336409759701247450870516091067095135594597858962158706246422753170406165231357980221901079861
# fib_mat: 24352 = 5111433618745962730375109480351185863201696043891836836640140449758639766270521026206317088861875012065368434792536150211881771904765187145220616905823521237556974511104932226710150057113973121792004093107268981585260219963964157309420916708617098749418808490469039317643568584369861849574160783587232972761725704578184392398769871005933137896505665040792078597521854475541129942979352291858225406651234859034623348168374537767677177975517943432456157230349863395797888022167622847537594011163712501375255161569374069038369784718751900429288527002927667746723225423109867868662962824178381163700326676334884388061880844345647617634870410192204884637544566014099680492258395255757560675110846889822367804035365816591236345717653027539083672107140563611105101975407455608771421902199736462757736316938735823412230080175464888475545847684310339411507386897086779376625293428718690816428164491558479379631162048877430477393952362812314298443030989993093388055269551135232602836626792503715717697743913560020442174589841543200387237883706952861069349194866945670866584032206965791412481181225098898024756240497806605537667014778453162392336979651816022476051510400478557637946549374813921899665005362232843374770734056986659441001594291711959933845623176318903240078213003650232738212617255693968451119041607193374928586260818182384965208661467054860444359767141004629296503488988162183850496735613085400161626773964362432513708254845558115614098182397563306466663212142847664478093685705155640437247571025609792874455375224611353245538012520107289321062178441380305294827264369715704763373164592979755396141062784753524309689007309771796384729026953529533723948342197860836952389705152262563131920388496276822234136953570386376430846226575481973977823323373429996325479447658108415658221120910399707323074667120603364663200669040791199138936126961594466139357059999587138473747540680776971598800407072049669593900661747894027768929071238001176347317022818919551513153989349081585639624908475608183024374065952962982660987215271782556796430985978846294116017024641553994157623573779726677953517642155272181771402451778124447000285261186794585564390025582996415181172678301063694370953789699701289838081893193608028012118669217838504365317689906417398912497920217703546460685353563915603577942414631250128193268928962645323438940614818565244420834446506482785307844452074124378410200977899553373862665088005350102795991948970409494794185870688981607394177183686072168879209546327937790838615694290141438193736226161899607123896881027686489147065244416858034471109202436278984700491797400691524707226975648996393961162261414220214498861775251468039852788152925825818432660898790741985234941555255002673986564611510774374072790110902193793583854129116447712185695864563982954378199849711589119711069886805992838879389198197770374502235829086501446828597558561785430112240380537417302301567478681811272521331922442005921086285819507236224906980044240692444347238010657497471151771554537620760257306584893854161210117710359621310004527991488627581904918292848456768331444327472050708417035913744950114972954317474340139983953727839439756665499934777054465301258698190719438147208544599318813028219478762155172623227110614182395992230400110830256794833746672559640245524415711420689831714169359057122204122503654581038420060559288125509374443996212288274205428057969288718873003917764694573170127371806982811730036890305213701994931297144295606772329618876485960201557898971695711667475432571630315705478291110942657937790709044723602428273164113165602504468779553544010694333665928045513379225907772469843857643573177361287900473360989887752810319031918596022789404791560917185728390196740222421469901714748462073416432897800013013054072056396188249330723338110306463823367277137299324900144946928621267645494712600813851121903189444713553281506417355180685534338869124278206445255295991523181826196362320817562087507641598604895299712165252504682672601243916714402600811549219070830926162237702369252337526099126996536461295085034805145786810309143091122141859681983885839199340993396610523604877978102469266839165585275778486958075177339467776188572393754957667622093938382090995685570977904070620259696422879477172153941206186497653713436409251902573638649214451393238783169892478817567278192862696258602622306465958095461748395614149844545215414851276558375095039601990311670702615689332357368176512512177772392591660796978220723192055579700475389778237463038114492101325097733270801272976418825893082456463383959514057772455848171693212604008631353852480416485794782106904655179655709035760361128043713197812204030671172898172775562306483747171666097678740254326851098445184911292143979255261614300165559557459849158033726774488673529103151428906406638698906178906176998941836035230715669865750707203369329119184251105605635319003153758984258161928998800866887221319244722829077342296798351996970787414460765275701036084197410755242233578324079370952898747790604003166590689496603713893350962250403669606823751035330053464620394417993885390511811107815357153561437016875583975532465576272162274
# prac2.rb:171:in `to_i': Infinity (FloatDomainError)
#         from prac2.rb:171:in `fib_mat2'
#         from prac2.rb:206:in `call'
#         from prac2.rb:206:in `fib_tester'
#         from prac2.rb:217:in `block in <main>'
#         from prac2.rb:213:in `times'
#         from prac2.rb:213:in `<main>'

# となったためfib_mat2はコメントアウトの方で検証した
# ...PCが落ちた関係上フィボナッチ数の表示をやめることとした

# =>
# fib_rec: 38
# fib_for: 5383
# fib_mat: 24637
# fib_mat2: 1403925
# fib_gen: 938364

# 計算の容易さから、この計算方法の場合ジェネレータのほうが速いと踏んでいたが、そうではなかった模様...
# 途中でInfinityとなったことで計算が容易になったのではないかと推測し、3秒で数回競わせてみる

def fib_tester2(func_name)
    start, lap = Process.times.utime, 0
    count, res = 0, 0
    func = method(func_name)
    while lap < 3 # 10秒以内にいくつまでたどり着けるかで競う
        res = func.call(count)
        count += 1
        lap = Process.times.utime - start
    end
    # puts "#{func_name}: #{count} = #{res}"
    puts "#{func_name}: #{count}"
end

# fib_tester2(:fib_mat2)

$_fib_gen = Enumerator.new do |y|
    x0, x1 = 0, 1
    loop do
        x0, x1 = x1, x0 + x1
        y << x0
    end
end
def fib_gen(n)
    return $_fib_gen.next
end

# fib_tester2(:fib_gen)

# 1回目
# fib_mat2: 433838
# fib_gen: 462170

# 2回目
# fib_mat2: 442295
# fib_gen: 460053

# 3回目
# fib_mat2: 406926
# fib_gen: 472060

# ジェネレータが勝利!!

# 勝負の方法を変えて、第40000項目を求めるのにかかる時間で比較

def fib_tester3(func_name)
    start = Process.times.utime
    method(func_name).call(40000)
    end_t = Process.times.utime
    puts "#{func_name}: #{end_t - start}s"
end

fib_tester3(:fib_mat2)
fib_tester3(:fib_byGen)

# 1回目
# fib_mat2: 0.0s
# fib_byGen: 0.094s

# 2回目
# fib_mat2: 0.0s
# fib_byGen: 0.07800000000000001s

# 3回目
# fib_mat2: 0.0s
# fib_byGen: 0.07800000000000001s