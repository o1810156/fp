def bench(count = 1)
    start = Process.times.utime
    count.times do yield end
    end_t = Process.times.utime
    return end_t - start
end

def tester(f)
    for i in 1..10
        count = 10**i
        total_time = 0
        time_array = []
        for n in 10..1000
            time = bench(count) do method(f).call(n) end
            if time < 0.1 then break end # 短過ぎたら計測できないので抜け出し
            time_array << time
            total_time += time            
            if total_time > 10 then break end # 長すぎたら中断
        end
        time_array.each_with_index do |time, i|
            puts "#{f}: [count: #{count}, n: #{i+10}]: #{time}"
        end
        if total_time > 9 then break end
    end
    puts "\n###\n"
end

# a n^2 O(1)

def square1(n)
    return n*n
end

# b n^2 O(n)

def square2(n)
    result = 0
    n.times do result += n end
    return result
end

# c n^2 O(n**2)

def square3(n)
    result = 0
    n.times do
        n.times do
            result += 1
        end
    end
    return result
end

# d 1.0000000001^n O(n)

def near1pow1(n)
    result = 1.0
    n.times do result *= 1.0000000001 end
    return result
end

# e 1.0000000001^n O(log n)..?

$call_count = 0

def near1pow2(n)
    $call_count += 1
    if n == 0
        return 1.0
    elsif n == 1
        return 1.0000000001
    elsif n % 2 > 0 # 基数
        return near1pow2(n-1) * 1.0000000001
    else # 偶数
        return near1pow2(n/2)**2
    end
end

# f 1.0000000001^n O(n)

def near1pow3(n)
    # 1.0000000001 ^ n = e ^ (ln( 1.0000000001 ^ n )) = e ^ (n * ln( 1.0000000001))
    return Math.exp(n*Math.log(1.0000000001))
end

# g 1 ～ 3の値がn個並んだ全組み合わせを生成する O(3^n)

def nest3n(n)
    nest3(n, "")
end

def nest3(n, s)
    if n <= 0
        # puts(s)
    else
        1.step(3) do |i| nest3(n-1, s+i.to_s) end
    end
end

# h 1 ～ nの値のすべての順列を生成する O(n!)

def perm(n)
    a = Array.new(n) do |i| i+1 end
    perm_sub(a, [])
end

def perm_sub(a, b)
    if a.length == b.length
        # p b
    else
        a.each_index do |i|
            if a[i] != nil
                x = a[i]; a[i] = nil; b.push(x)
                perm_sub(a, b)
                a[i] = x; b.pop
            end
        end
    end
end

# tester(:square1)
# tester(:square2)
# tester(:square3)
# tester(:near1pow1)
# tester(:near1pow2)
# tester(:near1pow3)
# tester(:nest3n)
# tester(:perm)

# permに関してはtesterではよい計測が行えなかったので別途benchで計測した

# p(bench(1) do perm(8) end) # => 0.078
# p(bench(1) do perm(9) end) # => 0.86
# p(bench(1) do perm(10) end) # => 8.312000000000001
# p(bench(1) do perm(11) end) # => 99.438

for i in 1..100
    near1pow2(i)
    # puts "#{$call_count} : log(#{i}) = #{Math.log(i, 2)}"
    puts "#{$call_count} : sqrt(#{i}) = #{Math.sqrt(i)}"
    $call_count = 0
end

# =>
# 1 : log(1) = 0.0
# 2 : log(2) = 1.0
# 3 : log(3) = 1.584962500721156
# 3 : log(4) = 2.0
# 4 : log(5) = 2.321928094887362
# 4 : log(6) = 2.584962500721156
# 5 : log(7) = 2.807354922057604
# 4 : log(8) = 3.0
# 5 : log(9) = 3.1699250014423126
# 5 : log(10) = 3.3219280948873626
# 6 : log(11) = 3.4594316186372978
# 5 : log(12) = 3.5849625007211565
# 6 : log(13) = 3.700439718141092
# 6 : log(14) = 3.8073549220576037
# 7 : log(15) = 3.9068905956085187
# 5 : log(16) = 4.0
# 6 : log(17) = 4.08746284125034
# 6 : log(18) = 4.169925001442312
# 7 : log(19) = 4.247927513443585
# 6 : log(20) = 4.321928094887363
# 7 : log(21) = 4.392317422778761
# 7 : log(22) = 4.459431618637297
# 8 : log(23) = 4.523561956057013
# 6 : log(24) = 4.584962500721157
# 7 : log(25) = 4.643856189774724
# 7 : log(26) = 4.700439718141093
# 8 : log(27) = 4.754887502163469
# 7 : log(28) = 4.807354922057604
# 8 : log(29) = 4.857980995127573
# 8 : log(30) = 4.906890595608519
# 9 : log(31) = 4.954196310386876
# 6 : log(32) = 5.0
# 7 : log(33) = 5.044394119358453
# 7 : log(34) = 5.08746284125034
# 8 : log(35) = 5.129283016944966
# 7 : log(36) = 5.169925001442312
# 8 : log(37) = 5.20945336562895
# 8 : log(38) = 5.247927513443585
# 9 : log(39) = 5.285402218862249
# 7 : log(40) = 5.321928094887363
# 8 : log(41) = 5.357552004618084
# 8 : log(42) = 5.392317422778761
# 9 : log(43) = 5.426264754702098
# 8 : log(44) = 5.459431618637297
# 9 : log(45) = 5.491853096329675
# 9 : log(46) = 5.523561956057013
# 10 : log(47) = 5.554588851677638
# 7 : log(48) = 5.584962500721156
# 8 : log(49) = 5.614709844115208
# 8 : log(50) = 5.643856189774724
# 9 : log(51) = 5.672425341971496
# 8 : log(52) = 5.700439718141093
# 9 : log(53) = 5.7279204545632
# 9 : log(54) = 5.754887502163469
# 10 : log(55) = 5.78135971352466
# 8 : log(56) = 5.807354922057605
# 9 : log(57) = 5.832890014164742
# 9 : log(58) = 5.857980995127572
# 10 : log(59) = 5.882643049361842
# 9 : log(60) = 5.906890595608519
# 10 : log(61) = 5.930737337562887
# 10 : log(62) = 5.954196310386876
# 11 : log(63) = 5.977279923499917
# 7 : log(64) = 6.0
# 8 : log(65) = 6.022367813028454
# 8 : log(66) = 6.044394119358453
# 9 : log(67) = 6.066089190457772
# 8 : log(68) = 6.08746284125034
# 9 : log(69) = 6.10852445677817
# 9 : log(70) = 6.129283016944967
# 10 : log(71) = 6.149747119504682
# 8 : log(72) = 6.169925001442312
# 9 : log(73) = 6.189824558880018
# 9 : log(74) = 6.209453365628949
# 10 : log(75) = 6.22881869049588
# 9 : log(76) = 6.247927513443586
# 10 : log(77) = 6.266786540694902
# 10 : log(78) = 6.285402218862249
# 11 : log(79) = 6.303780748177103
# 8 : log(80) = 6.321928094887362
# 9 : log(81) = 6.339850002884625
# 9 : log(82) = 6.357552004618085
# 10 : log(83) = 6.375039431346925
# 9 : log(84) = 6.39231742277876
# 10 : log(85) = 6.409390936137703
# 10 : log(86) = 6.426264754702098
# 11 : log(87) = 6.442943495848729
# 9 : log(88) = 6.459431618637298
# 10 : log(89) = 6.475733430966398
# 10 : log(90) = 6.491853096329675
# 11 : log(91) = 6.507794640198696
# 10 : log(92) = 6.523561956057013
# 11 : log(93) = 6.539158811108032
# 11 : log(94) = 6.554588851677638
# 12 : log(95) = 6.569855608330948
# 8 : log(96) = 6.584962500721156
# 9 : log(97) = 6.599912842187128
# 9 : log(98) = 6.614709844115209
# 10 : log(99) = 6.6293566200796095
# 9 : log(100) = 6.643856189774725

# =>
# 1 : sqrt(1) = 1.0
# 2 : sqrt(2) = 1.4142135623730951
# 3 : sqrt(3) = 1.7320508075688772
# 3 : sqrt(4) = 2.0
# 4 : sqrt(5) = 2.23606797749979
# 4 : sqrt(6) = 2.449489742783178
# 5 : sqrt(7) = 2.6457513110645907
# 4 : sqrt(8) = 2.8284271247461903
# 5 : sqrt(9) = 3.0
# 5 : sqrt(10) = 3.1622776601683795
# 6 : sqrt(11) = 3.3166247903554
# 5 : sqrt(12) = 3.4641016151377544
# 6 : sqrt(13) = 3.605551275463989
# 6 : sqrt(14) = 3.7416573867739413
# 7 : sqrt(15) = 3.872983346207417
# 5 : sqrt(16) = 4.0
# 6 : sqrt(17) = 4.123105625617661
# 6 : sqrt(18) = 4.242640687119285
# 7 : sqrt(19) = 4.358898943540674
# 6 : sqrt(20) = 4.47213595499958
# 7 : sqrt(21) = 4.58257569495584
# 7 : sqrt(22) = 4.69041575982343
# 8 : sqrt(23) = 4.795831523312719
# 6 : sqrt(24) = 4.898979485566356
# 7 : sqrt(25) = 5.0
# 7 : sqrt(26) = 5.0990195135927845
# 8 : sqrt(27) = 5.196152422706632
# 7 : sqrt(28) = 5.291502622129181
# 8 : sqrt(29) = 5.385164807134504
# 8 : sqrt(30) = 5.477225575051661
# 9 : sqrt(31) = 5.5677643628300215
# 6 : sqrt(32) = 5.656854249492381
# 7 : sqrt(33) = 5.744562646538029
# 7 : sqrt(34) = 5.830951894845301
# 8 : sqrt(35) = 5.916079783099616
# 7 : sqrt(36) = 6.0
# 8 : sqrt(37) = 6.082762530298219
# 8 : sqrt(38) = 6.164414002968976
# 9 : sqrt(39) = 6.244997998398398
# 7 : sqrt(40) = 6.324555320336759
# 8 : sqrt(41) = 6.4031242374328485
# 8 : sqrt(42) = 6.48074069840786
# 9 : sqrt(43) = 6.557438524302
# 8 : sqrt(44) = 6.6332495807108
# 9 : sqrt(45) = 6.708203932499369
# 9 : sqrt(46) = 6.782329983125268
# 10 : sqrt(47) = 6.855654600401044
# 7 : sqrt(48) = 6.928203230275509
# 8 : sqrt(49) = 7.0
# 8 : sqrt(50) = 7.0710678118654755
# 9 : sqrt(51) = 7.14142842854285
# 8 : sqrt(52) = 7.211102550927978
# 9 : sqrt(53) = 7.280109889280518
# 9 : sqrt(54) = 7.3484692283495345
# 10 : sqrt(55) = 7.416198487095663
# 8 : sqrt(56) = 7.483314773547883
# 9 : sqrt(57) = 7.54983443527075
# 9 : sqrt(58) = 7.615773105863909
# 10 : sqrt(59) = 7.681145747868608
# 9 : sqrt(60) = 7.745966692414834
# 10 : sqrt(61) = 7.810249675906654
# 10 : sqrt(62) = 7.874007874011811
# 11 : sqrt(63) = 7.937253933193772
# 7 : sqrt(64) = 8.0
# 8 : sqrt(65) = 8.06225774829855
# 8 : sqrt(66) = 8.12403840463596
# 9 : sqrt(67) = 8.18535277187245
# 8 : sqrt(68) = 8.246211251235321
# 9 : sqrt(69) = 8.306623862918075
# 9 : sqrt(70) = 8.366600265340756
# 10 : sqrt(71) = 8.426149773176359
# 8 : sqrt(72) = 8.48528137423857
# 9 : sqrt(73) = 8.54400374531753
# 9 : sqrt(74) = 8.602325267042627
# 10 : sqrt(75) = 8.660254037844387
# 9 : sqrt(76) = 8.717797887081348
# 10 : sqrt(77) = 8.774964387392123
# 10 : sqrt(78) = 8.831760866327848
# 11 : sqrt(79) = 8.888194417315589
# 8 : sqrt(80) = 8.94427190999916
# 9 : sqrt(81) = 9.0
# 9 : sqrt(82) = 9.055385138137417
# 10 : sqrt(83) = 9.1104335791443
# 9 : sqrt(84) = 9.16515138991168
# 10 : sqrt(85) = 9.219544457292887
# 10 : sqrt(86) = 9.273618495495704
# 11 : sqrt(87) = 9.327379053088816
# 9 : sqrt(88) = 9.38083151964686
# 10 : sqrt(89) = 9.433981132056603
# 10 : sqrt(90) = 9.486832980505138
# 11 : sqrt(91) = 9.539392014169456
# 10 : sqrt(92) = 9.591663046625438
# 11 : sqrt(93) = 9.643650760992955
# 11 : sqrt(94) = 9.695359714832659
# 12 : sqrt(95) = 9.746794344808963
# 8 : sqrt(96) = 9.797958971132712
# 9 : sqrt(97) = 9.848857801796104
# 9 : sqrt(98) = 9.899494936611665
# 10 : sqrt(99) = 9.9498743710662
# 9 : sqrt(100) = 10.0