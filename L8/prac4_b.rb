def ikasama_coin_sim(n = 10000)
    dist_arr = Array.new(11, 0)
    n.times do
        win = 0
        10.times do
            win += rand(1..100) < 60 ? 1 : 0
        end
        dist_arr[win] += 1
    end
    res = {}
    dist_arr.each_with_index do |w, i|
        res[i] = ("%.3f" % ((w / n.to_f) * 100) ) + "%"
    end
    return res
end

p ikasama_coin_sim

# =>
# {0=>"0.010%", 1=>"0.180%", 2=>"1.390%", 3=>"4.710%", 4=>"11.980%", 5=>"21.290%", 6=>"24.850%", 7=>"20.480%", 8=>"11.020%", 9=>"3.440%", 10=>"0.650%"}
# {0=>"0.020%", 1=>"0.150%", 2=>"1.320%", 3=>"4.760%", 4=>"12.380%", 5=>"21.170%", 6=>"24.480%", 7=>"20.890%", 8=>"10.600%", 9=>"3.630%", 10=>"0.600%"}
# {0=>"0.020%", 1=>"0.160%", 2=>"1.430%", 3=>"5.150%", 4=>"12.000%", 5=>"21.340%", 6=>"24.720%", 7=>"19.610%", 8=>"11.660%", 9=>"3.510%", 10=>"0.400%"}

# ↓ 実際の確率を求める(例によって数学はやりたくないのでプログラムで)

def comb(n, r) # 第4回演習4で作成したプログラムを借用
	return (r == 0 or r == n) ? 1 : comb(n-1, r) + comb(n-1, r-1)
end

def ikasama_coin_dist
    dist_arr = Array.new(11, 0)

    11.times do |i|
        dist_arr[i] = comb(10, i) * 0.6**i * 0.4**(10-i)
    end

    res = {}
    dist_arr.each_with_index do |w, i|
        res[i+1] = ("%.3f" % (w * 100) ) + "%"
    end
    return res
end

p ikasama_coin_dist

# =>
# {1=>"0.010%", 2=>"0.157%", 3=>"1.062%", 4=>"4.247%", 5=>"11.148%", 6=>"20.066%", 7=>"25.082%", 8=>"21.499%", 9=>"12.093%", 10=>"4.031%", 11=>"0.605%"}

# シミュレーションは大体うまくいっていることが確認できる。