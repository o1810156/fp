def two_dice_sim(n = 10000)
    dist_arr = Array.new(13, 0)
    n.times do
        dice_a = rand(1..6)
        dice_b = rand(1..6)
        dist_arr[dice_a + dice_b] += 1
    end
    res = {}
    for i in 2..12
        res[i] = "#{(dist_arr[i] / n.to_f) * 100}%"
    end
    return res
end

p two_dice_sim

# =>
# {2=>"2.88%", 3=>"4.97%", 4=>"8.68%", 5=>"10.97%", 6=>"13.669999999999998%", 7=>"16.5%", 8=>"14.6%", 9=>"11.469999999999999%", 10=>"8.32%", 11=>"5.4%", 12=>"2.54%"}
# {2=>"2.92%", 3=>"5.52%", 4=>"8.459999999999999%", 5=>"10.82%", 6=>"13.889999999999999%", 7=>"16.34%", 8=>"13.41%", 9=>"11.91%", 10=>"8.61%", 11=>"5.46%", 12=>"2.6599999999999997%"}
# {2=>"2.82%", 3=>"5.67%", 4=>"8.27%", 5=>"11.18%", 6=>"13.91%", 7=>"16.7%", 8=>"14.04%", 9=>"10.57%", 10=>"8.51%", 11=>"5.53%", 12=>"2.8000000000000003%"}

# 7で最も確率が高くなっているのが確認できる。

# ↓ 実際の確率を求める(数学はやりたくないのでこれもプログラム)

def two_dice_dist
    dist_arr = Array.new(13, 0)
    for i in 1..6
        for j in 1..6
            dist_arr[i + j] += 1
        end
    end
    res = {}
    for i in 2..12
        res[i] = ("%.3f" % ((dist_arr[i] / 36.0) * 100) ) + "%"
    end
    return res
end

p two_dice_dist

# =>
# {2=>"2.778%", 3=>"5.556%", 4=>"8.333%", 5=>"11.111%", 6=>"13.889%", 7=>"16.667%", 8=>"13.889%", 9=>"11.111%", 10=>"8.333%", 11=>"5.556%", 12=>"2.778%"}

# シミュレーションは大体うまくいっていることが確認できる。