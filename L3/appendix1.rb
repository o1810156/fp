# おまけ 1: 行列計算の実装 1

# a = [[1, 2]
#     ,[3, 4]]

# b = [[5, 6]
#     ,[7, 8]]

# c = a・b

# c = [[1*5+2*7, 1*6+2*8]
#     ,[3*5+4*7, 3*6+4*8]]

# という行列計算を行うdot関数を定義する。
# 引数: 行列の整合性が取れている行列2つ a b
# 返り値: aとbの積

class Matrix
    def initialize(arr)
        if arr.is_a?(Numeric)
            @val = [[arr]]
            @row, @col = 1, 1
        elsif arr.class == Array
            if arr[0].class == Array
                if !(arr[0][0].is_a?(Numeric)) then raise ArgumentError.new(), "Numeric please." end
                @val = arr
                @row, @col = arr.length, arr[0].length
                if arr.any? {|elm| elm.length != arr[0].length} then raise ArgumentError.new(), "Invalid col length." end
            elsif arr[0].is_a?(Numeric)
                @val = [arr]
                @row, @col = 1, arr.length
            end
        else
            raise ArgumentError.new(), "Numeric matrix please."
        end
    end

    attr_accessor :val, :row, :col
end

class InvalidCombError < StandardError; end

def dot(a, b)
    if a.class != Matrix or b.class != Matrix
        raise ArgumentError.new(), "Matrixs please."
    end

    if a.col != b.row
        raise InvalidCombError.new(), "a.col is not match b.row."
    end

    c = []

    a.row.times do |i|
        c.push([])
        b.col.times do |j|
            d = 0
            a.col.times do |k|
                d += a.val[i][k]*b.val[k][j]
            end
            c[i].push(d)
        end
    end
    return Matrix.new(c)
end

a = Matrix.new([[1, 2] ,[3, 4]])
b = Matrix.new([[5, 6] ,[7, 8]])

p dot(a, b).val # => [[19, 22], [43, 50]]
p dot(b, a).val # => [[23, 34], [31, 46]]

c = Matrix.new(5)
d = Matrix.new([1, 2])

p dot(c, d).val # => [[5, 10]]

# e = Matrix.new([[1, 2], [1]]) # => Invalid col length.

def dot_homework(a, b)
    begin
        puts "#{a.val}・#{b.val} = #{dot(a, b).val}"
    rescue InvalidCombError
        puts "#{a.val}・#{b.val} -> 定義されない"
    end
end

# 問題

# 次の3つの行列a, b, cとその転置行列ta, tb, tcという6個の行列を考える。この6個の行列2個を並べる並べ方は全部で6 × 6 = 36通りの組み合わせがある。積が定義できるものは積を計算し、積が定義されないものは、定義されないと解答欄に記入せよ。

# a = [[-1, 1, 0]
#     ,[3, 0, 4]]

# b = [[1, 0]
#     ,[-2, 1]
#     ,[3, 2]]

# c = [[3]
#     ,[2]
#     ,[-1]]

a = Matrix.new([[-1, 1, 0] ,[3, 0, 4]])

b = Matrix.new([[1, 0] ,[-2, 1] ,[3, 2]])

c = Matrix.new([[3], [2], [-1]])

# 転置行列を求める関数Tの実装

class Matrix
    def T
        rw = []
        self.col.times do |i|
            cl = []
            self.row.times do |j|
                cl.push(self.val[j][i])
            end
            rw.push(cl)
        end
        return Matrix.new(rw)
    end
end

ta = a.T
tb = b.T
tc = c.T

p ta.val # => [[-1, 3], [1, 0], [0, -4]]
p tb.val # => [[1, -2, 3], [0, 1, 2]]
p tc.val # => [[3, 2, -1]]

mats = [a, b, c, ta, tb, tc]

for m in mats
    for n in mats
        dot_homework(m, n)
    end
end

# =>
# [[-1, 1, 0], [3, 0, 4]]・[[-1, 1, 0], [3, 0, 4]] -> 定義されない
# [[-1, 1, 0], [3, 0, 4]]・[[1, 0], [-2, 1], [3, 2]] = [[-3, 1], [15, 8]]
# [[-1, 1, 0], [3, 0, 4]]・[[3], [2], [-1]] = [[-1], [5]]
# [[-1, 1, 0], [3, 0, 4]]・[[-1, 3], [1, 0], [0, 4]] = [[2, -3], [-3, 25]]
# [[-1, 1, 0], [3, 0, 4]]・[[1, -2, 3], [0, 1, 2]] -> 定義されない
# [[-1, 1, 0], [3, 0, 4]]・[[3, 2, -1]] -> 定義されない
# [[1, 0], [-2, 1], [3, 2]]・[[-1, 1, 0], [3, 0, 4]] = [[-1, 1, 0], [5, -2, 4], [3, 3, 8]]
# [[1, 0], [-2, 1], [3, 2]]・[[1, 0], [-2, 1], [3, 2]] -> 定義されない
# [[1, 0], [-2, 1], [3, 2]]・[[3], [2], [-1]] -> 定義されない
# [[1, 0], [-2, 1], [3, 2]]・[[-1, 3], [1, 0], [0, 4]] -> 定義されない
# [[1, 0], [-2, 1], [3, 2]]・[[1, -2, 3], [0, 1, 2]] = [[1, -2, 3], [-2, 5, -4], [3, -4, 13]]
# [[1, 0], [-2, 1], [3, 2]]・[[3, 2, -1]] -> 定義されない
# [[3], [2], [-1]]・[[-1, 1, 0], [3, 0, 4]] -> 定義されない
# [[3], [2], [-1]]・[[1, 0], [-2, 1], [3, 2]] -> 定義されない
# [[3], [2], [-1]]・[[3], [2], [-1]] -> 定義されない
# [[3], [2], [-1]]・[[-1, 3], [1, 0], [0, 4]] -> 定義されない
# [[3], [2], [-1]]・[[1, -2, 3], [0, 1, 2]] -> 定義されない
# [[3], [2], [-1]]・[[3, 2, -1]] = [[9, 6, -3], [6, 4, -2], [-3, -2, 1]]
# [[-1, 3], [1, 0], [0, 4]]・[[-1, 1, 0], [3, 0, 4]] = [[10, -1, 12], [-1, 1, 0], [12, 0, 16]]
# [[-1, 3], [1, 0], [0, 4]]・[[1, 0], [-2, 1], [3, 2]] -> 定義されない
# [[-1, 3], [1, 0], [0, 4]]・[[3], [2], [-1]] -> 定義されない
# [[-1, 3], [1, 0], [0, 4]]・[[-1, 3], [1, 0], [0, 4]] -> 定義されない
# [[-1, 3], [1, 0], [0, 4]]・[[1, -2, 3], [0, 1, 2]] = [[-1, 5, 3], [1, -2, 3], [0, 4, 8]]
# [[-1, 3], [1, 0], [0, 4]]・[[3, 2, -1]] -> 定義されない
# [[1, -2, 3], [0, 1, 2]]・[[-1, 1, 0], [3, 0, 4]] -> 定義されない
# [[1, -2, 3], [0, 1, 2]]・[[1, 0], [-2, 1], [3, 2]] = [[14, 4], [4, 5]]
# [[1, -2, 3], [0, 1, 2]]・[[3], [2], [-1]] = [[-4], [0]]
# [[1, -2, 3], [0, 1, 2]]・[[-1, 3], [1, 0], [0, 4]] = [[-3, 15], [1, 8]]
# [[1, -2, 3], [0, 1, 2]]・[[1, -2, 3], [0, 1, 2]] -> 定義されない
# [[1, -2, 3], [0, 1, 2]]・[[3, 2, -1]] -> 定義されない
# [[3, 2, -1]]・[[-1, 1, 0], [3, 0, 4]] -> 定義されない
# [[3, 2, -1]]・[[1, 0], [-2, 1], [3, 2]] = [[-4, 0]]
# [[3, 2, -1]]・[[3], [2], [-1]] = [[14]]
# [[3, 2, -1]]・[[-1, 3], [1, 0], [0, 4]] = [[-1, 5]]
# [[3, 2, -1]]・[[1, -2, 3], [0, 1, 2]] -> 定義されない
# [[3, 2, -1]]・[[3, 2, -1]] -> 定義されない